package busqueda.jomp;

import java.util.List;
import comun.Gestor;
import busqueda.Camino;
import busqueda.Seccion;
import busqueda.Caminos;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.exceptions.InvalidQueryException;

public class RecorreGrafo {
	private Gestor gestor;

	public RecorreGrafo(Gestor gestor) {
		this.gestor = gestor;
	}

	public void generaCaminos(Camino caminoActual, ArrayListEnteros verticesActual) {
		if (debug)
			System.out.printf("generaCaminos cliente(" + caminoActual.idcliente
					+ ") en camino(" + caminoActual.idcamino + ") ultimo("+verticesActual.getUltimoElemento()+")\n");
		int[][] resultados = null;
		try {
			ResultSet resultsA = gestor.getCassandraSession().execute("SELECT vertA,vertB,idseccion FROM Bd.vertices WHERE vertA="+ verticesActual.getUltimoElemento());
			ResultSet resultsB = gestor.getCassandraSession().execute("SELECT vertA,vertB,idseccion FROM Bd.vertices WHERE vertB="+ verticesActual.getUltimoElemento());
			List rowsA = (List)resultsA.all();
			List rowsB = (List)resultsB.all();
			int pos = 0;
			resultados = new int[rowsA.size() + rowsB.size()][2];
			for(int i=0;i<rowsA.size();i++){
				resultados[pos][0] = ((Row) rowsA.get(i)).getInt("vertB");
				resultados[pos][1] = ((Row) rowsA.get(i)).getInt("idseccion");
				pos++;
			}
			for(int i=0;i<rowsB.size();i++){
				resultados[pos][1] = ((Row) rowsB.get(i)).getInt("idseccion");
				resultados[pos][0] = ((Row) rowsB.get(i)).getInt("vertA");
				pos++;
			}
			
			//omp parallel for
			for (int j = 0; j < resultados.length; j++) {
				if (debug)
					System.out.print(" \nllamando para subcamino("
							+ resultados[j][0] + ")");
				if (!verticesActual.compruebaSiContiene(resultados[j][0])) {
					Camino caminoAvisitar = new Camino();
					caminoAvisitar.idcliente = caminoActual.idcliente;
					caminoAvisitar.idcamino = caminoActual.idcamino;
					Seccion seccion=new Seccion();
					seccion.idSeccion=resultados[j][1];
					caminoAvisitar.secciones.addAll(caminoActual.secciones);
					caminoAvisitar.secciones.add(seccion);
					ArrayListEnteros verticesTemp = new ArrayListEnteros();
					verticesTemp.addAll(verticesActual);
					verticesTemp.add(resultados[j][0]);
					if (resultados[j][0] != 0) {
						generaCaminos(caminoAvisitar,verticesTemp);
					} else {
						/*//omp critical*/
						{
							caminosEncontrados.agregaCamino(caminoAvisitar);
						}
					}
				}
		}
		} catch (InvalidQueryException e) {
			if (debug)
				System.out.printf("errorconsultaconsultarSiguientesSaltos\n");
			e.printStackTrace();
		}
	}

	/*
	private void rellenaResultado() {
		for(int i=0;i<caminosFinal.size();i++){
			for(int j=0;j<caminosFinal.get(i).secciones.size();j++){
				ResultSet resultsA = gestor.getCassandraSession().execute("SELECT idseccion,consumoMax,coste FROM Bd.caracteristicasVertices WHERE idseccion="+ caminosFinal.get(i).secciones.get(j).idSeccion+" LIMIT 1");
				List<Row> rowsA = resultsA.all();
				if(rowsA.size()==1){
					caminosFinal.get(i).secciones.get(j).coste=rowsA.get(0).getFloat("coste");
					caminosFinal.get(i).secciones.get(j).coste=rowsA.get(0).getInt("consumoMax");
				}				
			}
			
		}

	}
	*/

	
	

	void sigueCamino(int idcamino, int camino, int vertActual) {
		/*
		 * caminos[idcliente][idcamino][camino]=vertActual; camino++; Select
		 * vertA,vertB where A,B = vertActual for each row
		 * if(!compruebaVerticeVisitado
		 * (caminos[idcliente][idcamino],row.getInt(vertA)) {
		 * sigueCamino(idcliente,idcamino,camino,row.getInt(vert)); idcamino++;
		 * 
		 * }
		 */

	}

	public double consultaNumeroVertices() {
		double nVertices = 0;
		if (debug)
			System.out.printf("consultaNumeroVertices:");
		try {
			gestor.getCassandraSession().execute("USE Bd");
		} catch (InvalidQueryException e) {
			if (debug)
				System.out.printf("errorbd\n");
		}
		try {
			nVertices = gestor.getCassandraSession()
					.execute("SELECT COUNT(1) FROM Bd.vertices;").all().get(0)
					.getLong("count");
		} catch (InvalidQueryException e) {
			if (debug)
				System.out.printf("errorconsulta\n");
		}
		if (debug)
			System.out.printf(nVertices + "\n");
		return nVertices;
	}

	private Caminos caminosEncontrados;

	public void encuentraCaminosTodosClientes(Caminos caminos) {
		if (debug)
			System.out.printf("encuentraCaminosTodosClientes\n");
		try {
			gestor.getCassandraSession().execute("USE Bd");
		} catch (InvalidQueryException e) {
			if (debug)
				System.out.printf("errorbd\n");
		}
		try {
			caminosEncontrados=caminos;
			ResultSet clientes = gestor.getCassandraSession().execute(
					"SELECT * FROM Bd.clientes");
			List rows = (List)clientes.all();
			for (int i=0;i<rows.size();i++) {
				System.out.print("Buscando camino para el cliente("
						+ ((Row)rows.get(i)).getInt("id") + ") con conexion("
						+ ((Row)rows.get(i)).getInt("idseccion") + "),");
				Camino caminoTemp = new Camino();
				caminoTemp.idcliente = ((Row)rows.get(i)).getInt("id");
				caminoTemp.idcamino = -1;
				ArrayListEnteros vertices = new ArrayListEnteros();
				vertices.add(((Row)rows.get(i)).getInt("idseccion"));
				generaCaminos(caminoTemp,vertices);
				//rellenaResultado();
				// consultarSiguientesSaltos(row.getInt("id"),row.getInt("idseccion"));
			}
			// limpiaCaminosSinSalida();
		} catch (InvalidQueryException e) {
			if (debug)
				System.out.printf("errorconsulta\n");
		}
		System.out.println("Terminado encuentraCaminosTodosClientes");
	}

	private boolean debug = false;

	public void setDebug(boolean debug) {
		this.debug = debug;
	}
}
